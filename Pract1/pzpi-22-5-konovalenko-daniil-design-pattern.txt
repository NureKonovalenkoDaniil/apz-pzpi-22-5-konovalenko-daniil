МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ 
РАДІОЕЛЕКТРОНІКИ


Практична робота №1
з дисципліни
«Архітектура програмного забезпечення»
на тему: «Патерни проєктування»





Виконав:	Перевірив:
ст. гр. ПЗПІ-22-5	ст. викладач каф. ПІ
Коноваленко Даніїл Миколайович	Сокорчук Ігор Петрович





Харків 2024
1 ІСТОРІЯ ЗМІН
Ім’я	Дата	Причина для змін	Версія
Коноваленко Даніїл	03.31.2025	Початкова версія	1.0
			
	
 
2 ЗАВДАННЯ

1.	Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ»
2.	Створити та оформити слайди презентації доповіді
3.	Створити та опублікувати на YouTube відеозапис доповіді
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5.	При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
7.	Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
8.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
9.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1








3 ОПИС ВИКОНАНОЇ РОБОТИ

Під час підготовки доповіді-презентації виконано комплексний аналіз патернів проектування з акцентом на патерн Singleton як приклад структурного підходу до архітектури програмного забезпечення. Робота виконана у такій послідовності:
1.	Вступний огляд патернів проектування
Проведено класифікацію патернів проектування на три основні категорії: креаційні, структурні та поведінкові. Визначено їх роль як перевірених часом архітектурних шаблонів, що спрощують розробку та підтримку програмного коду.
2.	Детальний аналіз патерну Singleton
Патерн Singleton розглянуто як класичний приклад структурного патерну, що забезпечує існування єдиного екземпляра класу з контрольованим доступом до нього. Описано його ключові характеристики: 
o	забезпечення глобального стану;
o	обмеження створення кількох екземплярів об’єкта;
o	спрощення доступу до ресурсів.
Наведено приклад базової реалізації Singleton у мові програмування JavaScript із використанням замикання (closure) для створення єдиного екземпляра.
3.	Реалізація Singleton у Python
Представлено кілька підходів до реалізації патерну Singleton у Python: 
o	базова реалізація, що є простою, але не потокобезпечною;
o	потокобезпечна реалізація з використанням об’єкта threading.Lock;
o	спрощена реалізація з використанням декораторів або метакласів.
Кожен підхід проаналізовано з точки зору його практичної застосовності та обмежень.
4.	Порівняння з альтернативними підходами
Проведено порівняння Singleton з іншими архітектурними рішеннями: 
o	Dependency Injection – сучасна альтернатива, що сприяє гнучкості та тестуванню коду;
o	Factory – патерн для створення об’єктів без жорсткого обмеження кількості екземплярів;
o	Multiton – розширення Singleton із підтримкою кількох іменованих екземплярів.
Визначено критерії вибору Singleton: необхідність глобального стану та контрольованого доступу.
5.	Практичні приклади використання
Описано типові сценарії застосування Singleton: 
o	логування у корпоративних системах;
o	управління конфігураціями додатків;
o	контроль з’єднань із базами даних;
o	кешування даних;
o	підтримка глобального стану додатку.
6.	Рекомендації та кращі практики
Сформульовано рекомендації щодо використання Singleton: 
o	застосовувати обережно, уникаючи надмірного використання;
o	чітко визначати відповідальність об’єкта;
o	розглядати альтернативи у випадках, коли глобальний стан не є критичним.

4 ВИСНОВКИ

Патерн Singleton, як класичний приклад структурного підходу, відіграє важливу роль у ситуаціях, що вимагають єдиного екземпляра об’єкта з глоба-льним доступом. Проведений аналіз показав його переваги (контроль доступу, економія ресурсів) та недоліки (потенційні проблеми з тестуванням і потокобезпекою). Реалізація Singleton у Python демонструє гнучкість мови програмування, але вимагає врахування контексту використання. Порівняння з альтернативами, такими як Dependency Injection, підкреслює необхідність вибору оптимального рішення залежно від вимог проєкту.
 
Додаток А
 
Додаток Б

 
Рисунок Б.1 – Вступний слайд
 
Рисунок Б.2 – Загальне поняття патернів проєктування
 
 
Рисунок Б.3 – Основне про Singleton
 
Рисунок Б.4 – Реалізація Singleton
 
 
Рисунок Б.5 – Реалізація на Python
 
Рисунок Б.6 – Переваги Singleton
 
 
Рисунок Б.7 – Мінуси та обмеження Singleton
 
Рисунок Б.8 – Альтернативи патерну Singleton
 
 
Рисунок Б.9 – Коли слід використовувати Singleton
 
Рисунок Б.10 – Висновки
 
Додаток В

Приклад В.1
Базова реалізація Singleton у Python.
01 class Singleton:
02     _instance = None
03 
04     def __new__(cls):
05         if cls._instance is None:
06             cls._instance = super().__new__(cls)
07         return cls._instance
08 
09 obj1 = Singleton()
10 obj2 = Singleton()
11 print(obj1 is obj2)  # True












Приклад В.2
Потокобезпечна реалізація Singleton у Python.
01 import threading
02 
03 class Singleton:
04     _instance = None
05     _lock = threading.Lock()
06 
07     def __new__(cls):
08         with cls._lock:
09             if cls._instance is None:
10                 cls._instance = super().__new__(cls)
11         return cls._instance
12 
13 obj1 = Singleton()
14 obj2 = Singleton()
15 print(obj1 is obj2)  # True
 
Приклад В.3
Реалізація Singleton із декоратором у Python:
01 def singleton(cls):
02     instances = {}
03     def get_instance(*args, **kwargs):
04         if cls not in instances:
05             instances[cls] = cls(*args, **kwargs)
06         return instances[cls]
07     return get_instance
08 
09 @singleton
10 class Singleton:
11     pass
12 
13 obj1 = Singleton()
14 obj2 = Singleton()
15 print(obj1 is obj2)  # True
