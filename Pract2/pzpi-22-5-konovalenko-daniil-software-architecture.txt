МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ 
РАДІОЕЛЕКТРОНІКИ


Практична робота №2
з дисципліни
«Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних системи. Amazon»





Виконав:	Перевірив:
ст. гр. ПЗПІ-22-5	ст. викладач каф. ПІ
Коноваленко Даніїл Миколайович	Сокорчук Ігор Петрович





Харків 2024
1 ІСТОРІЯ ЗМІН
Ім’я	Дата	Причина для змін	Версія
Коноваленко Даніїл	05.04.2025	Початкова версія	1.0
			
	
 
2 ЗАВДАННЯ

1.	Підготувати доповідь на тему: «Архітектура відомих програмних систем»
2.	Створити та оформити слайди презентації доповіді
3.	Створити та опублікувати на YouTube відеозапис доповіді
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
5.	При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
6.	Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
7.	Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
8.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub
9.	Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ2







3 ОПИС ВИКОНАНОЇ РОБОТИ

Під час підготовки доповіді-презентації виконано комплексний аналіз еволюції архітектури Amazon, зосереджений на переході до мікросервісної архітектури та впровадженні сучасних технологічних рішень. Робота виконана у такій послідовності:
1.	Аналіз переходу до мікросервісної архітектури
Досліджено етап переходу Amazon від монолітної архітектури до мікросервісної, який розпочався у 2010 році. Встановлено, що цей перехід дозволив значно підвищити швидкість розроблення та впровадження змін, досягнувши частоти оновлень кожні кілька секунд. Мікросервісна архітектура подолала обмеження традиційних рішень, забезпечивши більшу гнучкість і масштабовість системи, що дало змогу Amazon адаптуватися до зростаючих вимог користувачів.
2.	Огляд принципів мікросервісної архітектури
Визначено ключові принципи мікросервісної архітектури, що застосовуються в Amazon: 
o	кожен сервіс виконує окрему специфічну задачу, що спрощує розроблення, тестування та підтримку;
o	незалежність і автономність компонентів, що дозволяє розгортати та оновлювати сервіси незалежно;
o	комунікація між сервісами через чітко визначені API-інтерфейси, що забезпечує прозору та ефективну взаємодію.
3.	Аналіз технологічних компонентів
Розглянуто основні технологічні компоненти, які використовуються в Amazon для підтримки мікросервісів: 
o	Amazon EC2 – забезпечує обчислювальні потужності та масштабовану інфраструктуру для запуску сервісів;
o	Amazon S3 – використовується для надійного та економічного зберігання великих обсягів даних із високою доступністю;
o	Amazon API Gateway – забезпечує управління API, спрощує розроблення та підтримує безпечний доступ до сервісів.
4.	Дослідження комунікації між сервісами
Проаналізовано механізми комунікації між сервісами в Amazon. Встановлено, що використовується асинхронна взаємодія, яка дозволяє ефективно обробляти запити та забезпечує гнучкість у масштабуванні.
5.	Огляд інструментів моніторингу
Досліджено інструменти моніторингу, що застосовуються в Amazon: 
o	Amazon CloudWatch – для збору та аналізу метрик, логів і подій, що забезпечує видимість стану системи;
o	розподілене трасування запитів для відстеження їхнього шляху через різні сервіси;
o	автоматизація реакції на збої, що дозволяє системі відновлюватися без втручання людини;
o	логування та аналіз продуктивності для виявлення вузьких місць і оптимізації роботи системи.
6.	Оцінка безпеки та масштабованості
Визначено, що ізоляція сервісів у мікросервісній архітектурі зменшує ризик поширення збоїв і атак. Також підкреслено важливість автоматичного відновлення після збоїв, що підвищує надійність системи.

4 ВИСНОВКИ

Еволюція архітектури Amazon від монолітної до мікросервісної стала важливим кроком у підвищенні ефективності розроблення та масштабованості системи. Перехід дозволив досягти високої частоти оновлень і подолати обмеження традиційних архітектурних рішень. Мікросервісна архітектура, побудована на принципах автономності, ізоляції та чітко визначених API-інтерфейсів, забезпечує гнучкість і надійність системи. Використання сучасних технологічних компонентів, таких як Amazon EC2, S3 та API Gateway, підтримує масштабовану інфраструктуру та безпечний доступ до сервісів. Інструменти моніторингу, зокрема Amazon CloudWatch і розподілене трасування, дозволяють оперативно виявляти та усувати проблеми, а автоматизація реакції на збої підвищує стійкість системи.
 
Додаток А
 
Додаток Б

 
Рисунок Б.1 – Вступний слайд
 
Рисунок Б.2 – Еволюція архітектури Amazon
 
 
Рисунок Б.3 – Принципи мікросервісної архітектури
 
Рисунок Б.4 – Технологічні компоненти
 
 
Рисунок Б.5 – Організаційна структура розробки
 
Рисунок Б.6 – Комунікація між сервісами
 
 
Рисунок Б.7 – Інструменти моніторингу
 
Рисунок Б.8 – Безпека та масштабованість
 
 
Рисунок Б.9 – Переваги архітектури
 
Рисунок Б.10 – Майбутнє архітектури. Висновки
 
Додаток В

Приклад В.1
Приклад асинхронної комунікації між сервісами (Python з використанням asyncio):
01 import asyncio
02 import aiohttp
03 
04 async def fetch_data(url):
05     async with aiohttp.ClientSession() as session:
06         async with session.get(url) as response:
07             return await response.json()
08 
09 async def main():
10    url = "https://api.example.com/data"
11    data = await fetch_data(url)
12    print(data)
13 
14 asyncio.run(main())











Приклад В.2
Приклад використання Amazon API Gateway для виклику сервісу (Python з boto3):
01 import boto3
02 
03 client = boto3.client('apigateway')
04 
05 def invoke_api(api_id, stage, path):
06     response = client.test_invoke_method(
07         restApiId=api_id,
08         resourceId='resource_id',
09         httpMethod='GET',
10         pathWithQueryString=path,
11         stageName=stage
12     )
13     return response['body']
14 
15 api_response = invoke_api('api_id', 'prod', '/data')
16 print(api_response)
